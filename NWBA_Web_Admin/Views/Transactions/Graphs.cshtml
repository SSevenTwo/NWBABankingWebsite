@model NWBA_Web_Admin.Models.ViewModels.GraphViewModel
@{
    ViewData["Title"] = "Graphs";
}

<head>
    <link rel="stylesheet" href="~/css/Chart.css" />
</head>


<h1>Statistics</h1>

<div class="row">
    <div class="col-lg-3 col-md-4">
        <form id="form">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div id="destinationAccount" class="form-group">
                <label asp-for="CustomerID" class="control-label"> Customer: </label>
                <select id="customer-select" asp-for="CustomerID" class="form-control">
                    <option value="0"> All </option>
                    @foreach (var customer in (List<Customer>)ViewBag.AllCustomers)
                    {
                        <option value="@customer.CustomerId"> @customer.CustomerName: &nbsp; @customer.CustomerId </option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label asp-for="Date1" class="control-label">From: </label>
                <input type="date" asp-for="Date1" class="form-control" />
                <span asp-validation-for="Date1" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Date2" class="control-label">To: </label>
                <input type="date" asp-for="Date2" class="form-control" />
                <span asp-validation-for="Date2" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="GraphType" class="control-label">Data</label>
                <select id="graphType" asp-for="GraphType" class="form-control">
                    <option value="bar">Transactions per day (Bar)</option>
                    <option value="pie">Proportion of transaction types (Pie)</option>
                    <option value="line">Amount deposited per day (Line)</option>
                </select>
            </div>
            <div class="form-group">
                <input id="Submit" type="submit" value="View" class="btn btn-primary" />
            </div>
        </form>
    </div>



    <div class="col-lg-9">
        <canvas id="transactionChart"></canvas>
    </div>
</div>
<div class="container">
    <br />
    <hr />
    <button id="button" class="btn btn-primary" style="display:none">Show statement of this time period</button>
    <hr>
    <table id="trans-table" class="table"></table>
</div>

<script src="~/js/Chart.js"></script>
<script src="~/js/moment.js"></script>
<script src ="~/js/jquery-3.4.1.js"></script>
<script>
    var canvas = document.getElementById("transactionChart").getContext("2d");
    $("#form").submit(function (e) {
        //so ajax can be called
        e.preventDefault();

        var f = $('#form');

        var serializedForm = f.serializeArray();
        if (document.getElementById("graphType").value == "bar") {
            $.post("https://localhost:44317/transactions/graphs", serializedForm, function (transactionDates) {
                var object = transactionDates;

                const labels = [];
                const data = [];
                for (let x of object) {
                    var formattedDate = x.date.substring(0, 10);
                    
                    labels.push(formattedDate);
                    data.push({ t: moment(x.date, 'L').toDate(), y: x.count });
                }

                const transactionChart = new Chart(canvas, {
                    type: "bar",
                    data: {
                        labels: labels,
                        datasets: [{
                            label: "Transaction count",
                            data: data,
                            options: {
                                scales: {
                                    xAxes: [{
                                        type: "time",
                                        time: {
                                            unit: "day"
                                        }
                                    }]
                                }
                            },
                            backgroundColor: "rgba(255, 99, 132, 0.2)",
                            borderColor: "rgba(255, 99, 132, 1)",
                            borderWidth: 1
                        }]
                    }
                });
            });
        }
        else if (document.getElementById("graphType").value == "pie") {
            $.post("https://localhost:44317/transactions/piegraph", serializedForm, function (transactionDates) {
                var object = transactionDates;
                console.log(transactionDates);

                const labels = [];
                const data = [];
                for (let x of object) {
                    var typeDisplay; 
                    switch(x.type)
                    {
                        case ("D"):
                            typeDisplay = "Deposit"; 
                            break;
                        case ("W"):
                            typeDisplay = "Withdrawal"; 
                            break;
                        case ("T"):
                            typeDisplay = "Transfer"; 
                            break;
                        case ("B"):
                            typeDisplay = "Billpay"; 
                            break;
                    }
                    labels.push(typeDisplay);
                    data.push(x.count);
                }

                const transactionChart = new Chart(canvas, {
                    type: "doughnut",
                    data: {
                        labels: labels,
                        datasets: [{
                            data: data,
                            backgroundColor: "rgba(255, 99, 132, 0.2)",
                            borderColor: "rgba(255, 99, 132, 1)",
                            borderWidth: 1
                        }]
                    }
                });
            });
        }
        else {
            $.post("https://localhost:44317/transactions/linegraph", serializedForm, function (transactionDates) {
                var object = transactionDates;
                
                const labels = [];
                const data = [];
                for (let x of object) {

                    var formattedDate = x.date.substring(0, 10);
                    labels.push(formattedDate);
                    
                    console.log(formattedDate);
                    data.push({ t: moment(x.date, 'L').toDate(), y: x.amount });
                }

                const transactionChart = new Chart(canvas, {
                    type: "line",
                    data: {
                        labels: labels,
                        datasets: [{
                            label: "Amount deposited",
                            data: data,
                            options: {
                                scales: {
                                    xAxes: [{
                                        type: "time",
                                        time: {
                                            unit: "day"
                                        }
                                    }]
                                }
                            },
                            backgroundColor: "rgba(255, 99, 132, 0.2)",
                            borderColor: "rgba(255, 99, 132, 1)",
                            borderWidth: 1
                        }]
                    }
                });
            });
            console.log("success")
        }
        document.getElementById("button").style = "display:inline";
        document.getElementById("trans-table").innerHTML = "";
    })
</script>
<script>
    document.getElementById("button").onclick = generateTableView;

    document.getElementById("customer-select").onchange = clearTable;

    function clearTable() {
        document.getElementById("trans-table").innerHTML = "";
        document.getElementById("button").innerHTML = "Show statement of this time period";
        document.getElementById("button").style = "display:none";
    }

    function generateTableView() {
        if (document.getElementById("trans-table").innerHTML == "") {
            document.getElementById("button").innerHTML = "Hide statement of this time period";
            
            var f = $('#form');

            var serializedForm = f.serializeArray();

            $.post("https://localhost:44317/transactions/tables", serializedForm, function (transactions) {
                console.log("Successfully returned from controller");
                //set up variables to use throughout code
                var trans = transactions;
                let table = document.querySelector("table");
                console.log(trans);
                let headers = ["Transaction ID", "Transaction Type", "Account", "Destination Account", "Amount", "Comment", "Time"]

                //create first head and row for first line
                let thead = table.createTHead();
                let row = thead.insertRow();
                //generates the headers for each column
                for (let key of headers) {
                    let th = document.createElement("th");
                    let text = document.createTextNode(key);
                    //put in text for each th cell
                    th.appendChild(text);
                    //put the th in the row
                    row.appendChild(th);
                }

                for (let element of trans) {
                    //insert a new row for each element
                    let row = table.insertRow();
                    //loops through each element one by one to individually put in the cells
                    for (key in element) {
                        //insert individual cell
                        let cell = row.insertCell();
                        //insert text in that cell
                        var text = "";
                        if (element[key] == null) {
                            text = document.createTextNode("N/A");
                        }
                        else {
                            text = document.createTextNode(element[key]);
                        }
                        cell.appendChild(text);
                    }
                }
            })
        } else {
            document.getElementById("trans-table").innerHTML = "";
            document.getElementById("button").innerHTML = "Show statement of this time period";
        }
    }
</script>
